// gachaClaudeV2 Express ÏãúÏä§ÌÖú ÌÖåÏä§Ìä∏
import * as fs from 'fs';

// ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ Î°úÎìú
const sampleData = JSON.parse(fs.readFileSync('./sample-data.json', 'utf8'));

console.log('=== gachaClaudeV2 Express ÏãúÏä§ÌÖú ÌÖåÏä§Ìä∏ ===\n');

// Mock ÌÅ¥ÎûòÏä§Îì§ (Ïã§Ï†ú Íµ¨ÌòÑ ÏãúÎÆ¨Î†àÏù¥ÏÖò)
class MockDeviceEntity {
  constructor(
    public hardwareId: string,
    public tenantId: string,
    public ipAddress: string,
    public systemInfo: any,
    public status: string = 'pending',
    public deviceId?: string,
    public sqsQueueUrl?: string,
    public createdAt: Date = new Date(),
    public updatedAt: Date = new Date(),
    public rejectionReason?: string
  ) {}

  approve(deviceId: string, sqsQueueUrl: string): void {
    this.status = 'approved';
    this.deviceId = deviceId;
    this.sqsQueueUrl = sqsQueueUrl;
    this.updatedAt = new Date();
  }

  reject(reason: string): void {
    this.status = 'rejected';
    this.rejectionReason = reason;
    this.updatedAt = new Date();
  }

  isPending(): boolean { return this.status === 'pending'; }
  isApproved(): boolean { return this.status === 'approved'; }
  isRejected(): boolean { return this.status === 'rejected'; }
}

class MockDeviceValidator {
  static validateRegistration(data: any): { error?: string; value?: any } {
    if (!data.hardwareId || !data.tenantId || !data.ipAddress || !data.systemInfo) {
      return { error: 'Required fields are missing' };
    }
    return { value: data };
  }
}

class MockDeviceRegistrationService {
  private devices: MockDeviceEntity[] = [];

  constructor() {
    // Í∏∞Ï°¥ Ïû•Ïπò Îç∞Ïù¥ÌÑ∞ Ï¥àÍ∏∞Ìôî
    this.devices = sampleData.existingDevices.map((d: any) => 
      new MockDeviceEntity(
        d.hardwareId,
        d.tenantId,
        d.ipAddress,
        d.systemInfo,
        d.status,
        d.deviceId,
        d.sqsQueueUrl,
        new Date(d.createdAt),
        new Date(d.updatedAt),
        d.rejectionReason
      )
    );
  }

  async registerDevice(request: any): Promise<{ success: boolean; message: string }> {
    console.log(`üìù Ïû•Ïπò Îì±Î°ù ÏöîÏ≤≠: ${request.hardwareId}`);

    // Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
    const validation = MockDeviceValidator.validateRegistration(request);
    if (validation.error) {
      return { success: false, message: validation.error };
    }

    // Ï§ëÎ≥µ Ï≤¥ÌÅ¨
    const existingDevice = this.devices.find(d => d.hardwareId === request.hardwareId);
    if (existingDevice) {
      if (existingDevice.isPending()) {
        return { success: false, message: 'Device registration is already pending approval' };
      }
      if (existingDevice.isApproved()) {
        return { success: false, message: 'Device is already registered and approved' };
      }
    }

    // ÏÉà Ïû•Ïπò ÏÉùÏÑ±
    const device = new MockDeviceEntity(
      request.hardwareId,
      request.tenantId,
      request.ipAddress,
      request.systemInfo
    );
    this.devices.push(device);

    return { success: true, message: 'Device registration request submitted successfully' };
  }

  async getDeviceStatus(hardwareId: string): Promise<{
    status: string;
    deviceId?: string;
    sqsQueueUrl?: string;
    message: string;
  }> {
    console.log(`üîç Ïû•Ïπò ÏÉÅÌÉú Ï°∞Ìöå: ${hardwareId}`);

    const device = this.devices.find(d => d.hardwareId === hardwareId);
    if (!device) {
      throw new Error('Device not found');
    }

    if (device.isApproved()) {
      return {
        status: 'approved',
        deviceId: device.deviceId,
        sqsQueueUrl: device.sqsQueueUrl,
        message: 'Device has been approved and is ready for operation'
      };
    }

    if (device.isRejected()) {
      return {
        status: 'rejected',
        message: `Device registration was rejected: ${device.rejectionReason}`
      };
    }

    return {
      status: 'pending',
      message: 'Device registration is pending approval'
    };
  }

  async approveDevice(deviceId: string): Promise<{ success: boolean; message: string }> {
    console.log(`‚úÖ Ïû•Ïπò ÏäπÏù∏: ${deviceId}`);

    const device = this.devices.find(d => d.deviceId === deviceId);
    if (!device) {
      return { success: false, message: 'Device not found' };
    }

    if (!device.isPending()) {
      return { success: false, message: 'Device is not in pending status' };
    }

    // ÏäπÏù∏ Ï≤òÎ¶¨
    const newDeviceId = `dev-${Date.now()}`;
    const sqsQueueUrl = `https://sqs.ap-northeast-2.amazonaws.com/queue/device-${newDeviceId}`;
    device.approve(newDeviceId, sqsQueueUrl);

    return { success: true, message: 'Device approved successfully' };
  }

  async rejectDevice(deviceId: string, reason: string): Promise<{ success: boolean; message: string }> {
    console.log(`‚ùå Ïû•Ïπò Í±∞Î∂Ä: ${deviceId}, ÏÇ¨Ïú†: ${reason}`);

    const device = this.devices.find(d => d.deviceId === deviceId);
    if (!device) {
      return { success: false, message: 'Device not found' };
    }

    if (!device.isPending()) {
      return { success: false, message: 'Device is not in pending status' };
    }

    device.reject(reason);
    return { success: true, message: 'Device rejected successfully' };
  }

  async getPendingDevices(): Promise<MockDeviceEntity[]> {
    return this.devices.filter(d => d.isPending());
  }
}

// ÌÖåÏä§Ìä∏ Ïã§Ìñâ
async function runTests() {
  const deviceService = new MockDeviceRegistrationService();

  console.log('üöÄ Express API ÌÖåÏä§Ìä∏ ÏãúÏûë\n');

  // 1. Ïû•Ïπò Îì±Î°ù ÌÖåÏä§Ìä∏
  console.log('1Ô∏è‚É£ POST /api/devices/register');
  for (const request of sampleData.deviceRegistrationRequests.slice(0, 3)) {
    try {
      const result = await deviceService.registerDevice(request);
      console.log(`   ${request.hardwareId}: ${result.success ? '‚úÖ' : '‚ùå'} ${result.message}`);
    } catch (error: any) {
      console.log(`   ${request.hardwareId}: ‚ùå ${error.message}`);
    }
  }

  // 2. ÏÉÅÌÉú Ï°∞Ìöå ÌÖåÏä§Ìä∏
  console.log('\n2Ô∏è‚É£ GET /api/devices/status/:hardwareId');
  const testHardwareIds = ['VM101APPROVED01', 'VM102REJECTED01', 'VM103PENDING001'];
  
  for (const hardwareId of testHardwareIds) {
    try {
      const result = await deviceService.getDeviceStatus(hardwareId);
      console.log(`   ${hardwareId}: ${result.message}`);
      if (result.deviceId) {
        console.log(`     ‚Üí Ïû•Ïπò ID: ${result.deviceId}`);
        console.log(`     ‚Üí SQS URL: ${result.sqsQueueUrl?.substring(0, 50)}...`);
      }
    } catch (error: any) {
      console.log(`   ${hardwareId}: ‚ùå ${error.message}`);
    }
  }

  // 3. ÎåÄÍ∏∞Ï§ëÏù∏ Ïû•Ïπò Î™©Î°ù
  console.log('\n3Ô∏è‚É£ GET /api/devices/pending');
  const pendingDevices = await deviceService.getPendingDevices();
  console.log(`   ÎåÄÍ∏∞Ï§ëÏù∏ Ïû•Ïπò: ${pendingDevices.length}Í∞ú`);
  pendingDevices.forEach(device => {
    console.log(`   - ${device.hardwareId} (${device.createdAt.toISOString()})`);
  });

  // 4. Í¥ÄÎ¶¨Ïûê Ï†ïÎ≥¥
  console.log('\nüë• Í¥ÄÎ¶¨Ïûê Í≥ÑÏ†ï Ï†ïÎ≥¥:');
  sampleData.adminUsers.forEach((user: any) => {
    console.log(`   ${user.username} (${user.role}): ${user.permissions.join(', ')}`);
  });

  // 5. ÌôòÍ≤Ω Î≥ÄÏàò
  console.log('\n‚öôÔ∏è ÌôòÍ≤Ω ÏÑ§Ï†ï:');
  Object.entries(sampleData.environmentVariables).forEach(([key, value]) => {
    console.log(`   ${key}: ${value}`);
  });

  console.log('\n=== gachaClaudeV2 ÌÖåÏä§Ìä∏ ÏôÑÎ£å ===');
}

// ÌÖåÏä§Ìä∏ Ïã§Ìñâ
runTests().catch(console.error);